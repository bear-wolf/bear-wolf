/**
 *   Unslider by @idiot
 */

(function ($, f) {
    //  If there's no jQuery, Unslider can't work, so kill the operation.
    
    if (!$) return f;
    
    var Unslider = function () {
        //  Set up our elements
        this.el = f;
        this.items = f;

        //  Dimensions
        this.sizes = [];
        this.max = [0, 0];

        //  Current inded
        this.current = 0;
        //  Start/stop timer
        this.interval = f;

        //  Set some options
        this.opts = {
            speed: 500,
            delay: 7000, // f for no autoplay
            complete: f, // when a slide's finished
            keys: !f, // keyboard shortcuts - disable if it breaks things
            dots: f, // display вЂўвЂўвЂўвЂўoвЂў pagination
            fluid: f // is it a percentage width?,
        };

        //  Create a deep clone for methods where context changes
        var _ = this;

        this.init = function (el, opts) {
            this.el = el;
            this.ul = el.children('ul');
            this.max = [el.outerWidth(), el.outerHeight()];
            this.items = this.ul.children('li').each(this.calculate);

            //  Check whether we're passing any options in to Unslider
            this.opts = $.extend(this.opts, opts);

            //  Set up the Unslider
            this.setup();

            return this;
        };

        //  Get the width for an element
        //  Pass a jQuery element as the context with .call(), and the index as a parameter: Unslider.calculate.call($('li:first'), 0)
        this.calculate = function (index) {
            var me = $(this),
				width = me.outerWidth(), height = me.outerHeight();

            //  Add it to the sizes list
            _.sizes[index] = [width, height];

            //  Set the max values
            if (width > _.max[0]) _.max[0] = width;
            if (height > _.max[1]) _.max[1] = height;
        };

        //  Work out what methods need calling
        this.setup = function () {
            //  Set the main element
            this.el.css({
                overflow: 'hidden',
                width: _.max[0],
                height: this.items.first().outerHeight()
            });

            //  Set the relative widths
            this.ul.css({ width: (this.items.length * 100) + '%', position: 'relative' });
            this.items.css('width', (100 / this.items.length) + '%');

            if (this.opts.delay !== f) {
                this.start();
                this.el.hover(this.stop, this.start);
            }

            //  Custom keyboard support
            this.opts.keys && $(document).keydown(this.keys);

            //  Dot pagination
            this.opts.dots && this.dots();

            //  Little patch for fluid-width sliders. Screw those guys.
            if (this.opts.fluid) {
                var resize = function () {
                    _.el.css('width', Math.min(Math.round((_.el.outerWidth() / _.el.parent().outerWidth()) * 100), 100) + '%');
                };

                resize();
                $(window).resize(resize);
            }

            if (this.opts.arrows) {
                this.el.parent().append('<p class="arrows"><span class="prev">в†ђ</span><span class="next">в†’</span></p>')
					.find('.arrows span').click(function () {
					    $.isFunction(_[this.className]) && _[this.className]();
					});
            };

            //  Swipe support
            if ($.event.swipe) {
                this.el.on('swipeleft', _.prev).on('swiperight', _.next);
            }
        };

        //  Move Unslider to a slide index
        this.move = function (index, cb) {
            
            //  If it's out of bounds, go to the first slide
            if (!this.items.eq(index).length) index = 0;
            if (index < 0) index = (this.items.length - 1);
            
            var target = this.items.eq(index);
            var obj = { height: target.outerHeight() };
            var speed = cb ? 5 : this.opts.speed;

            if (!this.ul.is(':animated')) {
                //  Handle those pesky dots
                _.el.find('.dot:eq(' + index + ')').addClass('active').siblings().removeClass('active');

                this.el.animate(obj, speed);
                this.ul.animate($.extend({ left: '-' + index + '00%' }, obj), speed, function (data) {
                    _.current = index;
                    $.isFunction(_.opts.complete) && !cb && _.opts.complete(_.el);
                    
                    if ($("#panel-channels").hasClass("active")) unsl_Resize();
                });
            }
        };

        unsl_Resize = function () {
            var $hasdots = $(".tv-channels .has-dots");
            var $tv = $("#panel-channels");
            if ($tv.find("ol.dots").length != 0) {
                var el = parseInt($tv.height()) - 346;
                $tv.find(".righ_panel").css("height", ($tv.height() - 182) + "px");
                $hasdots.css("height", el);
                $hasdots.find(">ul").css("height", el);

                var d = $(".dots");
                var w = d.width();
                var b = $("body").width();
                b = ((b - w) / 2) + "px";
                d.css("left", b);
            }
        };

        //  Autoplay functionality
        this.start = function () {

            _.interval = setInterval(function () {
                _.move(_.current + 1);
            }, _.opts.delay);
        };

        //  Stop autoplay
        this.stop = function () {
            _.interval = clearInterval(_.interval);
            return _;
        };
                
        //  Keypresses
        this.keys = function (e) {
            var key = e.which;
            var map = {
                //  Prev/next
                37: _.prev,
                39: _.next,

                //  Esc
                27: _.stop
            };

            if ($.isFunction(map[key])) {
                map[key]();
            }
        };
        
        //  Arrow navigation
        this.next = function () {
            return _.stop().move(_.current + 1)
        };
        this.prev = function ()
        {
            return _.stop().move(_.current - 1)
        };

        this.dots = function () {
            //  Create the HTML
            var html = '<ol class="dots">';
            $.each(this.items, function (index) { html += '<li class="dot' + (index < 1 ? ' active' : '') + '">' + (index + 1) + '</li>'; });
            html += '</ol>';

            var navigate = "<a href='javascript:void(0)' data-direction='left' class='navigate arrowleft'></a><a href='javascript:void(0)' data-direction='right' class='navigate arrowright'></a>";
                        
            this.el.append(navigate).find("a.navigate").click(function () {
                var t = Update($(this),"a",null);
                _.move(t);
            });

            function Update(t, o, prev) {                
                var dir = 0;
                var temp = 0;
                var last = "last";
                var p = null;
                var $li = 0;                
                switch (o) {
                    case "a":
                        {
                            p = t.parent();
                            dir = t.data("direction");
                            $li = p.find("ol.dots li");
                            
                            temp = $li.filter(".active").index();
                            var $link = [$(p).find(".navigate.arrowleft"), $(p).find(".navigate.arrowright")];

                            switch (dir) {
                                case "left": { temp--; $link[1].removeClass(last); if (temp == 0) t.addClass(last); break; }
                                case "right": { temp++; $link[0].removeClass(last); if (($li.length - 1) == temp) t.addClass(last); break; }
                                default: break;
                            }

                            break;
                        }
                    case "li": {                        
                        p = t.parent().parent();                        
                        $li = p.find("ol.dots li");
                        var $link = [$(p).find(".navigate.arrowleft"), $(p).find(".navigate.arrowright")];                        
                        if (t.index() == 0) {
                            $link[0].addClass(last);
                        }
                        else $link[0].removeClass(last);

                        if (t.index() == ($li.length - 1)) {
                            $link[1].addClass(last);
                        } else {
                            $link[1].removeClass(last);
                        }
                        
                        break;
                    }
                    default: break;
                }                                
               
                return temp;
            }
            
            //  Add it to the Unslider
            this.el.addClass('has-dots').append(html).find('.dot').click(function () {                
                var pred = $(this).parent().find(".active").index();
                _.move($(this).index());                
                Update($(this), "li", pred);
                $(".dots").each(function () {
                    var d = $(this);
                    var b = d.parent().width();
                    var li = d.find("li");
                    var margin = 8;
                    w = (li.width() * li.length) + (((li.length - 2) * margin) + margin);
                    b = ((b - w) / 2) + "px";
                    d.animate({ "left": b }, 500);
                });
            });

        };
        
    };    

    //  Create a jQuery plugin
    $.fn.unslider = function (o) {
        var len = this.length;

        //  Enable multiple-slider support
        return this.each(function (index) {
            //  Cache a copy of $(this), so it 
            var me = $(this);
            var instance = (new Unslider).init(me, o);

            //  Invoke an Unslider instance
            me.data('unslider' + (len > 1 ? '-' + (index + 1) : ''), instance);            
        });
    };
})(window.jQuery, false);